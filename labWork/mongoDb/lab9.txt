1. Retrieve/Display every document of Deposit collection.
db.deposit.find()

2. Display only one document of Deposit collection. (Use: findOne())
db.deposit.findOne()

3. Insert following document into Deposit collection. (Use: insertOne())
db.deposit.insertOne(  {
    "ACTNO": 109,
    "CNAME": "KIRTI",
    "BNAME": "VIRAR",
    "AMOUNT": 3000,
    "ADATE": "3-5-97"
  })


4. Insert following documents into Deposit collection. (Use: insertMany())
db.deposit.insertMany([
  {
    "id": 110,
    "name": "MITALI ANDHERI",
    "amount": 4500,
    "date": "4-9-95"
  },
  {
    "id": 111,
    "name": "RAJIV NEHRU PLACE",
    "amount": 7000,
    "date": "2-10-98"
  }
]
)
5. Display all the documents of ‘VIRAR’ branch from Deposit collection.
    db.deposit.find({BNAME : {$eq : 'VIRAR'}})
6. Display all the documents of Deposit collection whose amount is between 3000 and 5000.
    db.deposit.find({$and : [{AMOUNT : {$gte : 3000}},{AMOUNT : {$lte : 5000}}]})
    db.deposit.find({AMOUNT:{$gte : 3000,$lte: 5000}})
7. Display all the documents of Deposit collection whose amount is greater than 2000 and branch is VIRAR.
    db.deposit.find({$and : [{AMOUNT : {$gt: 2000}},{BNAME:{$eq : 'VIRAR'}}]})
8. Display all the documents with CNAME, BNAME and AMOUNT fields from Deposit collection.
    db.deposit.find({},{
	CNAME:1,
	BNAME:1,
	AMOUNT:1
})
9. Display all the documents of Deposit collection on ascending order by CNAME.
    db.deposit.find().sort({CNAME:1})
10. Display all the documents of Deposit collection on descending order by BNAME.
    db.deposit.find().sort({BNAME:-1})
11. Display all the documents of Deposit collection on ascending order by ACTNO and descending order by
AMOUNT.
    db.deposit.find().sort({ACTNO:1 , AMOUNT:-1})
12. Display only two documents of Deposit collection.
    db.deposit.find().limit(2)
13. Display 3rd document of Deposit collection.
    db.deposit.find().skip(2).limit(1)
14. Display 6th and 7th documents of Deposit collection.
    db.deposit.find().skip(5).limit(2)
15. Display the count of documents in Deposit collection. 
    db.deposit.countDocuments()

PART B

3. Display all documents of "Student" collection whose age is 30.
    db.student.find({age : {$eq : 30}})
4. Display all documents of "Student" collection whose age is greater than 25.
    db.student.find({age : {$gt : 25}})
5. Display all documents of "Student" collection whose name is "John" and age is 30.
    db.student.find({$and : [{name : "John"} , {age : 30}]})
6. Display all documents of "Student" collection whose age is not equal to 25.
    db.student.find({age : {$ne : 25}})
7. Display all documents of "Student" collection whose age is equal to 25 or 30 or 35. (using $or as well
as using $in).
    db.student.find({$or : [{age : 25},{age : 30},{age : 35}]})
    db.student.find({age : {$in : [25,30,35]}})
8. Display all documents of "Student" collection whose name is "John" or age is 30.
    db.student.find({$or : [{name : "John"},{age : 30}]})
9. Display all documents of "Student" collection whose name is "John" and city is New York.
    db.student.find({$and : [{name : "John"},{city : "New York"}]})
10. Display name and age of students from "Student" collection whose name is "John" and city is New York.
    db.student.find({$and : [{name : "John"},{city : "New York"}]},{_id:0,name:1,age:1})

Part – C
1. Display name of students from "Student" collection whose age is between to 25 and 35 and sort output
by age in ascending order.
    db.student.find({age : {$gte : 25,$lte : 35}}).sort({age : 1})
2. Display all documents of "Student" collection and sort all the documents by name in ascending order
and then by age in descending.
    db.student.find().sort({name:1,age:-1})
3. Display first five documents of "Student" collection.
    db.student.find().limit(5)
4. Display fourth and fifth documents of "Student" collection.
    db.student.find().limit(2).skip(3) //works on priority
5. Display the name of oldest student from "Student" collection.
    db.student.find().sort({age : -1}).limit(1)
6. Display all documents of "Student" collection in such a way that skip the first 2 documents and return
the rest documents.
    db.student.find().skip(2)
